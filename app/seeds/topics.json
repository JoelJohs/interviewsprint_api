{
  "categories": [
    {
      "id": "js-react",
      "name": "JavaScript y React",
      "icon": "üü¶"
    },
    {
      "id": "python",
      "name": "Python",
      "icon": "üêç"
    },
    {
      "id": "sql",
      "name": "SQL",
      "icon": "üóÉÔ∏è"
    },
    {
      "id": "react-native",
      "name": "React Native",
      "icon": "üì±"
    },
    {
      "id": "git",
      "name": "Git",
      "icon": "üß∞"
    },
    {
      "id": "soft-skills",
      "name": "Mindset",
      "icon": "üß†"
    },
    {
      "id": "extras",
      "name": "Extras",
      "icon": "üìö"
    }
  ],
  "topics": [
    {
      "id": "js-tipos-de-datos",
      "title": "Tipos de datos (undefined, null, NaN, Symbol, etc.)",
      "category_id": "js-react",
      "details": [
        "Primitivos: String, Number, BigInt, Boolean, undefined, Symbol.",
        "Objeto: null (typeof es 'object'), Object, Array, Function.",
        "NaN: 'Not a Number', resultado de operaciones num√©ricas inv√°lidas."
      ]
    },
    {
      "id": "js-funciones-orden-superior",
      "title": "Funciones de orden superior (map, filter, reduce)",
      "category_id": "js-react",
      "details": [
        "Toman una funci√≥n como argumento o retornan una funci√≥n.",
        ".map(): Crea un nuevo array con los resultados de llamar a una funci√≥n para cada elemento.",
        ".filter(): Crea un nuevo array con elementos que pasan un test.",
        ".reduce(): Aplica una funci√≥n a un acumulador y a cada elemento para reducirlo a un solo valor."
      ]
    },
    {
      "id": "js-scope-y-closures",
      "title": "Scope y closures",
      "category_id": "js-react",
      "details": [
        "Scope: D√≥nde son accesibles las variables (Global, Function, Block con let/const).",
        "Closure (Clausura): Una funci√≥n interna tiene acceso al scope de la funci√≥n externa, incluso despu√©s de que la externa haya retornado."
      ]
    },
    {
      "id": "js-hoisting",
      "title": "Hoisting",
      "category_id": "js-react",
      "details": [
        "Las declaraciones (var, function) se mueven al inicio de su scope antes de la ejecuci√≥n.",
        "Solo se 'eleva' la declaraci√≥n, no la inicializaci√≥n (var x; se eleva, x = 5; no).",
        "let y const no se 'elevan' (est√°n en la 'Temporal Dead Zone')."
      ]
    },
    {
      "id": "js-this-contexto",
      "title": "this y contexto de ejecuci√≥n",
      "category_id": "js-react",
      "details": [
        "this se refiere al objeto al que pertenece la funci√≥n.",
        "Global: window (navegador) o global (Node).",
        "M√©todo de objeto: el objeto.",
        ".call(), .apply(), .bind(): Permiten establecer this expl√≠citamente.",
        "Arrow Functions (=>): No tienen su propio this, lo heredan del scope l√©xico superior."
      ]
    },
    {
      "id": "js-event-loop",
      "title": "Event loop y concurrency model",
      "category_id": "js-react",
      "details": [
        "Modelo de concurrencia de JS (un solo hilo).",
        "Call Stack: Donde se ejecutan las funciones.",
        "Callback Queue (o Task Queue): Tareas de eventos (clics, setTimeout).",
        "Event Loop: Mueve tareas de la Queue al Stack cuando el Stack est√° vac√≠o."
      ]
    },
    {
      "id": "js-microtasks-macrotasks",
      "title": "Microtasks vs macrotasks (Promise, setTimeout)",
      "category_id": "js-react",
      "details": [
        "Macrotasks (Task Queue): setTimeout, setInterval, I/O. Se ejecuta una por ciclo del Event Loop.",
        "Microtasks (Microtask Queue): Promise.then(), await. Se ejecutan todas al final de la tarea actual, antes del siguiente macrotask."
      ]
    },
    {
      "id": "js-prototype-chain",
      "title": "Prototype chain y herencia",
      "category_id": "js-react",
      "details": [
        "Mecanismo de herencia en JS.",
        "Los objetos tienen una propiedad [[Prototype]] (__proto__) que enlaza a otro objeto.",
        "Al buscar una propiedad, JS la busca en el objeto y luego en su prototipo, y as√≠ sucesivamente."
      ]
    },
    {
      "id": "js-object-create-clases",
      "title": "Object.create() vs clases ES6",
      "category_id": "js-react",
      "details": [
        "Object.create(proto): Crea un nuevo objeto con el prototipo especificado. Herencia protot√≠pica pura.",
        "Clases (class): 'Az√∫car sint√°ctico' sobre la herencia protot√≠pica. Introduce constructor, super, static."
      ]
    },
    {
      "id": "js-destructuring-spread-rest",
      "title": "Destructuring y spread/rest operators",
      "category_id": "js-react",
      "details": [
        "Destructuring ({ a, b } = obj): Extrae valores de arrays u objetos.",
        "Spread (...arr): Expande un iterable en elementos (copias, merge, argumentos).",
        "Rest (...args): Agrupa el 'resto' de los elementos en un array (par√°metros de funci√≥n)."
      ]
    },
    {
      "id": "js-async-await",
      "title": "async/await y manejo de errores",
      "category_id": "js-react",
      "details": [
        "Az√∫car sint√°ctico para trabajar con Promesas de forma m√°s s√≠ncrona.",
        "async: Marca una funci√≥n que retorna una Promesa.",
        "await: Pausa la ejecuci√≥n async hasta que la Promesa se resuelva.",
        "Manejo de errores: Se usa try...catch est√°ndar."
      ]
    },
    {
      "id": "js-settimeout-cero",
      "title": "setTimeout(fn, 0) y por qu√© no es inmediato",
      "category_id": "js-react",
      "details": [
        "Coloca la funci√≥n fn en la Callback Queue (como un macrotask).",
        "Se ejecutar√° solo despu√©s de que el Call Stack est√© vac√≠o y se hayan procesado todos los microtasks pendientes. √ötil para 'ceder' el hilo principal."
      ]
    },
    {
      "id": "react-jsx-vdom",
      "title": "JSX y virtual DOM",
      "category_id": "js-react",
      "details": [
        "JSX: Extensi√≥n de sintaxis (XML-like) para JS, usada por React para describir la UI. Se transpila a React.createElement().",
        "Virtual DOM (VDOM): Representaci√≥n de la UI en memoria. React la usa para calcular la diferencia (diffing) y aplicar solo los cambios necesarios (reconciliaci√≥n)."
      ]
    },
    {
      "id": "react-ciclo-de-vida-hooks",
      "title": "Ciclo de vida (useEffect, useLayoutEffect)",
      "category_id": "js-react",
      "details": [
        "useEffect(fn, [deps]): Para efectos secundarios (fetch, suscripciones, DOM).",
        "Se ejecuta en montaje, y en actualizaci√≥n si [deps] cambian.",
        "Retorna una funci√≥n de limpieza para el desmontaje.",
        "useLayoutEffect: Id√©ntico, pero se ejecuta s√≠ncronamente despu√©s de las mutaciones del DOM."
      ]
    },
    {
      "id": "react-estado-hooks",
      "title": "Estado (useState, useReducer)",
      "category_id": "js-react",
      "details": [
        "useState(initial): Retorna [valor, setValor]. Para estado simple.",
        "useReducer(reducer, initial): Retorna [estado, dispatch]. Para l√≥gica de estado compleja o que depende del estado anterior, similar a Redux."
      ]
    },
    {
      "id": "react-props-lifting-state",
      "title": "Props y lifting state",
      "category_id": "js-react",
      "details": [
        "Props (Propiedades): Datos pasados de un componente padre a un hijo (solo lectura).",
        "Lifting State Up (Elevar estado): Mover el estado al ancestro com√∫n m√°s cercano para compartirlo entre componentes."
      ]
    },
    {
      "id": "react-custom-hooks",
      "title": "Custom hooks",
      "category_id": "js-react",
      "details": [
        "Funciones que empiezan con 'use' y encapsulan l√≥gica de React reutilizable (estado, efectos, contexto).",
        "Ej: useFetch(url), useLocalStorage(key)."
      ]
    },
    {
      "id": "react-context-vs-redux",
      "title": "Context API vs Redux",
      "category_id": "js-react",
      "details": [
        "Context API: Mecanismo para pasar datos a trav√©s del √°rbol de componentes sin props (evita prop drilling). Ideal para 'estado global' simple (tema, usuario).",
        "Redux: Librer√≠a de manejo de estado (store, actions, reducers). Para estado global complejo, centralizado y con l√≥gica predecible."
      ]
    },
    {
      "id": "react-renderizado-condicional-listas",
      "title": "Renderizado condicional y listas",
      "category_id": "js-react",
      "details": [
        "Condicional: Usar JS est√°ndar: {condicion && <Componente/>} (AND), {condicion ? <A/> : <B/>} (ternario), o if/else fuera de JSX.",
        "Listas: Usar .map() sobre un array para retornar un array de elementos JSX."
      ]
    },
    {
      "id": "react-keys-reconciliacion",
      "title": "Keys en listas y reconciliaci√≥n",
      "category_id": "js-react",
      "details": [
        "Atributo especial key (string o number) que debe ser √∫nico entre hermanos.",
        "React usa las keys para identificar qu√© elementos cambiaron, se a√±adieron o eliminaron, optimizando la reconciliaci√≥n del VDOM."
      ]
    },
    {
      "id": "react-memoizacion",
      "title": "Memoizaci√≥n (React.memo, useMemo, useCallback)",
      "category_id": "js-react",
      "details": [
        "React.memo(Componente): HOC que evita re-renderizar un componente si sus props no cambian.",
        "useMemo(() => valor, [deps]): Hook que memo√≠za un valor calculado (costoso).",
        "useCallback(() => fn, [deps]): Hook que memo√≠za una funci√≥n (√∫til para pasar a hijos memoizados)."
      ]
    },
    {
      "id": "react-error-boundaries",
      "title": "Error boundaries",
      "category_id": "js-react",
      "details": [
        "Componentes de clase que capturan errores de JS en sus componentes hijos (render, ciclo de vida).",
        "Definen static getDerivedStateFromError() o componentDidCatch().",
        "Muestran una UI de fallback en lugar de 'romper' la app."
      ]
    },
    {
      "id": "react-suspense-lazy-loading",
      "title": "Suspense y lazy loading",
      "category_id": "js-react",
      "details": [
        "React.lazy(() => import('./Componente')): Permite cargar componentes din√°micamente (code splitting).",
        "<Suspense fallback={<Loading/>}>: Componente que permite mostrar un 'fallback' mientras sus hijos (cargados con lazy) est√°n 'suspendidos'."
      ]
    },
    {
      "id": "py-tipos-de-datos",
      "title": "Tipos de datos (list, dict, set, tuple)",
      "category_id": "python",
      "details": [
        "list: Mutable, ordenada, permite duplicados. [1, \"a\"].",
        "tuple: Inmutable, ordenada. (1, \"a\").",
        "dict: Mutable, ordenado por inserci√≥n (3.7+), pares clave-valor. {\"a\": 1}.",
        "set: Mutable, desordenado, no permite duplicados. {1, \"a\"}."
      ]
    },
    {
      "id": "py-list-comprehensions",
      "title": "List comprehensions",
      "category_id": "python",
      "details": [
        "Sintaxis concisa para crear listas.",
        "[expresion for item in iterable if condicion].",
        "Ej: cuadrados = [x*x for x in range(10)].",
        "Tambi√©n existen dict/set comprehensions."
      ]
    },
    {
      "id": "py-decoradores",
      "title": "Decoradores",
      "category_id": "python",
      "details": [
        "Funciones que modifican el comportamiento de otras funciones o m√©todos.",
        "Sintaxis @mi_decorador.",
        "Un decorador es una funci√≥n que toma una funci√≥n como argumento y retorna una nueva funci√≥n."
      ]
    },
    {
      "id": "py-generadores-yield",
      "title": "Generadores (yield)",
      "category_id": "python",
      "details": [
        "Funciones que usan yield para retornar un valor y 'pausar' su ejecuci√≥n, guardando su estado.",
        "Retornan un iterador. Eficientes en memoria para secuencias grandes."
      ]
    },
    {
      "id": "py-excepciones",
      "title": "Manejo de excepciones (try/except/finally)",
      "category_id": "python",
      "details": [
        "try: Bloque de c√≥digo que puede fallar.",
        "except MiError as e: Captura errores espec√≠ficos.",
        "else: Se ejecuta si el bloque try no lanz√≥ excepciones.",
        "finally: Se ejecuta siempre (para limpieza de recursos)."
      ]
    },
    {
      "id": "py-context-managers",
      "title": "Context managers (with)",
      "category_id": "python",
      "details": [
        "Objeto que define un contexto de ejecuci√≥n usando __enter__ y __exit__.",
        "La sentencia with asegura que los recursos (archivos, conexiones) se configuren y liberen correctamente."
      ]
    },
    {
      "id": "py-modulos-paquetes",
      "title": "M√≥dulos y paquetes",
      "category_id": "python",
      "details": [
        "M√≥dulo: Un archivo .py con c√≥digo Python.",
        "Paquete: Un directorio con m√≥dulos y un archivo __init__.py (puede estar vac√≠o) que lo marca como paquete."
      ]
    },
    {
      "id": "py-init-main-name",
      "title": "__init__.py, __main__, __name__",
      "category_id": "python",
      "details": [
        "__init__.py: Se ejecuta al importar un paquete.",
        "__name__: Variable global. Es \"__main__\" si el script se ejecuta directamente, o el nombre del m√≥dulo si se importa.",
        "if __name__ == \"__main__\":: Bloque para c√≥digo que solo debe ejecutarse al correr el script."
      ]
    },
    {
      "id": "py-tipado-estatico",
      "title": "Tipado est√°tico con typing",
      "category_id": "python",
      "details": [
        "Python es din√°micamente tipado, pero permite 'type hints' (anotaciones) opcionales.",
        "M√≥dulo typing (List, Dict, Optional).",
        "Usado por herramientas como mypy para an√°lisis est√°tico y por IDEs."
      ]
    },
    {
      "id": "py-dataclasses",
      "title": "dataclasses",
      "category_id": "python",
      "details": [
        "Decorador (@dataclass) que genera autom√°ticamente m√©todos especiales (__init__, __repr__, __eq__) para clases que almacenan datos.",
        "Reduce c√≥digo boilerplate."
      ]
    },
    {
      "id": "py-asyncio",
      "title": "Asyncio y concurrencia",
      "category_id": "python",
      "details": [
        "M√≥dulo para concurrencia usando un event loop (cooperativo, un solo hilo).",
        "Usa async def para definir corutinas y await para pausar y ceder control.",
        "Ideal para operaciones I/O bound (red, disco)."
      ]
    },
    {
      "id": "py-multiprocessing-threading",
      "title": "multiprocessing vs threading",
      "category_id": "python",
      "details": [
        "threading: Hilos dentro de un mismo proceso. Limitado por el GIL (Global Interpreter Lock); bueno para I/O bound.",
        "multiprocessing: Procesos separados, cada uno con su propio int√©rprete (sin GIL). Bueno para CPU bound."
      ]
    },
    {
      "id": "py-pep8",
      "title": "PEP8 y convenciones",
      "category_id": "python",
      "details": [
        "Gu√≠a de estilo oficial para c√≥digo Python.",
        "Define convenciones de nombrado (snake_case), indentaci√≥n (4 espacios), longitud de l√≠nea.",
        "Herramientas como flake8 o black ayudan a forzarlo."
      ]
    },
    {
      "id": "py-pytest",
      "title": "Testing con pytest",
      "category_id": "python",
      "details": [
        "Framework de testing popular.",
        "Permite escribir tests como funciones simples (def test_algo():).",
        "Usa assert est√°ndar. Extensible con 'fixtures'."
      ]
    },
    {
      "id": "py-entornos-virtuales",
      "title": "Entornos virtuales y pip freeze",
      "category_id": "python",
      "details": [
        "venv: Herramienta para crear entornos aislados con sus propias dependencias.",
        "pip freeze > requirements.txt: Guarda las dependencias y versiones exactas del entorno.",
        "pip install -r requirements.txt: Instala las dependencias desde el archivo."
      ]
    },
    {
      "id": "py-automatizacion-scripts",
      "title": "Automatizaci√≥n con scripts (argparse, subprocess)",
      "category_id": "python",
      "details": [
        "argparse: M√≥dulo para parsear argumentos de l√≠nea de comandos (crea scripts CLI robustos).",
        "subprocess: M√≥dulo para ejecutar comandos externos del sistema operativo."
      ]
    },
    {
      "id": "py-configuracion-diagnostico",
      "title": "Configuraci√≥n y diagn√≥stico (venv, requirements.txt, pyproject.toml)",
      "category_id": "python",
      "details": [
        "venv: Entorno virtual.",
        "requirements.txt: Lista de dependencias (generada con pip freeze).",
        "pyproject.toml: Archivo de configuraci√≥n unificado (PEP 518). Usado por herramientas modernas (poetry, pip) para definir dependencias y configuraci√≥n de build."
      ]
    },
    {
      "id": "sql-select-where-order-limit",
      "title": "SELECT, WHERE, ORDER BY, LIMIT",
      "category_id": "sql",
      "details": [
        "SELECT col1, col2: Especifica las columnas a retornar.",
        "FROM tabla: Especifica la tabla.",
        "WHERE condicion: Filtra las filas.",
        "ORDER BY col1 DESC: Ordena los resultados (ASC por defecto).",
        "LIMIT 10: Restringe el n√∫mero de filas retornadas."
      ]
    },
    {
      "id": "sql-distinct-vs-group-by",
      "title": "DISTINCT vs GROUP BY",
      "category_id": "sql",
      "details": [
        "SELECT DISTINCT col1: Retorna solo valores √∫nicos para esa columna (elimina duplicados).",
        "GROUP BY col1: Agrupa filas que tienen el mismo valor en col1, para poder usar funciones agregadas (COUNT, SUM) sobre cada grupo."
      ]
    },
    {
      "id": "sql-funciones-agregadas",
      "title": "Funciones agregadas (COUNT, SUM, AVG, MAX, MIN)",
      "category_id": "sql",
      "details": [
        "Operan sobre un conjunto de filas y retornan un solo valor.",
        "COUNT(*): N√∫mero de filas.",
        "SUM(col): Suma de valores.",
        "AVG(col): Promedio.",
        "Usadas con GROUP BY."
      ]
    },
    {
      "id": "sql-having-vs-where",
      "title": "HAVING vs WHERE",
      "category_id": "sql",
      "details": [
        "WHERE: Filtra filas *antes* de que se agrupen (opera sobre datos crudos).",
        "HAVING: Filtra grupos *despu√©s* de que se agrupen y se apliquen las funciones agregadas.",
        "... GROUP BY depto HAVING COUNT(*) > 10."
      ]
    },
    {
      "id": "sql-joins",
      "title": "INNER JOIN vs LEFT JOIN vs RIGHT JOIN vs FULL OUTER JOIN",
      "category_id": "sql",
      "details": [
        "INNER JOIN: Retorna filas cuando hay coincidencias en *ambas* tablas.",
        "LEFT JOIN: Retorna *todas* las filas de la tabla izquierda, y las coincidencias de la derecha (o NULL).",
        "RIGHT JOIN: Retorna *todas* las filas de la tabla derecha.",
        "FULL OUTER JOIN: Retorna *todas* las filas cuando hay una coincidencia en *cualquiera* de las tablas."
      ]
    },
    {
      "id": "sql-subqueries-ctes",
      "title": "Subqueries y CTEs (WITH)",
      "category_id": "sql",
      "details": [
        "Subquery: Una query SELECT anidada dentro de otra (en SELECT, FROM, o WHERE).",
        "CTE (Common Table Expression): Un conjunto de resultados temporal nombrado, definido con WITH. Mejora la legibilidad."
      ]
    },
    {
      "id": "sql-indices-optimizacion",
      "title": "√çndices y optimizaci√≥n",
      "category_id": "sql",
      "details": [
        "Estructura de datos (ej. B-Tree) que mejora la velocidad de b√∫squeda (SELECT con WHERE, JOINs).",
        "Se crean sobre columnas frecuentemente consultadas.",
        "Aceleran lecturas pero ralentizan escrituras (INSERT, UPDATE)."
      ]
    },
    {
      "id": "sql-normalizacion",
      "title": "Normalizaci√≥n y relaciones",
      "category_id": "sql",
      "details": [
        "Proceso de dise√±o de base de datos para reducir la redundancia de datos y mejorar la integridad.",
        "Formas Normales (1NF, 2NF, 3NF): Reglas para estructurar tablas usando claves primarias y for√°neas."
      ]
    },
    {
      "id": "sql-null-coalesce",
      "title": "NULL handling y COALESCE",
      "category_id": "sql",
      "details": [
        "NULL: Representa un valor desconocido o ausente.",
        "IS NULL / IS NOT NULL: Operadores para filtrar por NULL.",
        "COALESCE(col1, 'default'): Funci√≥n que retorna el primer valor no-NULL de la lista."
      ]
    },
    {
      "id": "sql-explain",
      "title": "EXPLAIN y an√°lisis de performance",
      "category_id": "sql",
      "details": [
        "Comando (ej. EXPLAIN SELECT ...) que muestra el 'plan de ejecuci√≥n' de la query.",
        "Indica c√≥mo la base de datos pretende ejecutar la consulta (qu√© √≠ndices usa, tipo de joins, orden).",
        "Clave para optimizar y diagnosticar queries lentas."
      ]
    },
    {
      "id": "rn-nativos-vs-web",
      "title": "Componentes nativos vs web",
      "category_id": "react-native",
      "details": [
        "RN no usa HTML. Usa componentes (<View>, <Text>) que se mapean a vistas nativas de iOS (UIView) y Android (<ViewGroup>).",
        "El 'bridge' de RN comunica el hilo de JS con el hilo nativo de UI."
      ]
    },
    {
      "id": "rn-navegacion",
      "title": "Navegaci√≥n (react-navigation)",
      "category_id": "react-native",
      "details": [
        "Librer√≠a est√°ndar para navegaci√≥n en RN.",
        "Provee navegadores Stack (para flujos pantalla-a-pantalla), Tab (pesta√±as) y Drawer (men√∫ lateral)."
      ]
    },
    {
      "id": "rn-hooks-movil",
      "title": "Hooks en m√≥vil (useEffect, useFocusEffect)",
      "category_id": "react-native",
      "details": [
        "useEffect: Funciona igual que en React.",
        "useFocusEffect: Hook de react-navigation. Se ejecuta cuando la pantalla *entra* en foco, y ejecuta su limpieza cuando *sale* del foco."
      ]
    },
    {
      "id": "rn-manejo-estado",
      "title": "Manejo de estado (Redux, Context)",
      "category_id": "react-native",
      "details": [
        "useState, useReducer, Context: Funcionan igual que en React.",
        "Librer√≠as externas (Redux, Zustand) tambi√©n funcionan.",
        "Considerar la persistencia del estado (ej. AsyncStorage) para guardar datos offline."
      ]
    },
    {
      "id": "rn-apis-nativas",
      "title": "Acceso a APIs nativas (Camera, Location, Push Notifications)",
      "category_id": "react-native",
      "details": [
        "Acceso a hardware (C√°mara, GPS) y APIs del OS (Push Notifications, Contactos).",
        "Se puede usar Expo (que abstrae muchas de ellas) o librer√≠as de terceros (ej. react-native-camera)."
      ]
    },
    {
      "id": "rn-estilos",
      "title": "Estilos (StyleSheet, styled-components)",
      "category_id": "react-native",
      "details": [
        "No se usa CSS. Se usa StyleSheet.create(), que crea objetos de JS con un subconjunto de propiedades CSS (usa Flexbox para layout).",
        "styled-components/native tambi√©n est√° disponible."
      ]
    },
    {
      "id": "rn-debugging",
      "title": "Debugging en m√≥vil (Flipper, React Native Debugger)",
      "category_id": "react-native",
      "details": [
        "Men√∫ de desarrollador (agitar el m√≥vil).",
        "Flipper: Plataforma de debugging de Meta.",
        "React Native Debugger: App standalone que combina Redux DevTools, React DevTools e inspector."
      ]
    },
    {
      "id": "rn-performance",
      "title": "Performance y renderizado",
      "category_id": "react-native",
      "details": [
        "Usar FlatList o SectionList para listas (virtualizaci√≥n).",
        "Memoizar componentes (React.memo) para evitar re-renders.",
        "Optimizar im√°genes y evitar console.log en producci√≥n."
      ]
    },
    {
      "id": "git-stash-vs-branch",
      "title": "git stash vs branch temporal",
      "category_id": "git",
      "details": [
        "git stash: Guarda cambios locales (WIP) temporalmente sin hacer commit, dejando el working directory limpio. √ötil para cambiar de rama r√°pidamente.",
        "Branch temporal: git checkout -b fix_temporal; git commit -m \"WIP\". M√°s robusto, pero requiere 'deshacer' el commit despu√©s."
      ]
    },
    {
      "id": "git-rebase-vs-merge",
      "title": "git rebase vs git merge",
      "category_id": "git",
      "details": [
        "git merge: Une dos ramas. Crea un 'merge commit' (no-lineal) que registra la uni√≥n. Historial preciso.",
        "git rebase: Reescribe el historial. Toma los commits de una rama y los 'reaplica' sobre otra. Crea un historial lineal y limpio. No usar en ramas p√∫blicas/compartidas."
      ]
    },
    {
      "id": "git-cherrypick-reset-revert",
      "title": "git cherry-pick, git reset, git revert",
      "category_id": "git",
      "details": [
        "git cherry-pick <hash>: Aplica un commit espec√≠fico de otra rama a la rama actual.",
        "git revert <hash>: Crea un *nuevo* commit que 'deshace' los cambios de un commit anterior. Seguro para ramas p√∫blicas.",
        "git reset --hard <hash>: Mueve el puntero de la rama a un commit anterior, *descartando* commits posteriores. Peligroso."
      ]
    },
    {
      "id": "git-commits",
      "title": "Buenas pr√°cticas de commits (git commit -m \"feature: add login\")",
      "category_id": "git",
      "details": [
        "Commits at√≥micos: Peque√±os, enfocados en una sola tarea.",
        "Mensajes claros: Usar 'Conventional Commits' (tipo(scope): mensaje).",
        "feature:, fix:, docs:, refactor:, test:, chore:."
      ]
    },
    {
      "id": "git-pr-templates",
      "title": "Pull request templates",
      "category_id": "git",
      "details": [
        "Archivo (pull_request_template.md) en el repositorio (en .github/) que pre-rellena la descripci√≥n de un PR.",
        "Asegura que se incluya contexto, c√≥mo probar, screenshots, etc."
      ]
    },
    {
      "id": "git-etiquetado",
      "title": "Etiquetado sem√°ntico (bug, enhancement, wip)",
      "category_id": "git",
      "details": [
        "Uso de etiquetas (labels) en Issues y PRs (ej. en GitHub, GitLab).",
        "bug, enhancement, wip (Work in Progress), needs-review, documentation.",
        "Ayuda a organizar y filtrar el trabajo."
      ]
    },
    {
      "id": "git-branching-model",
      "title": "Branching model (feature/, hotfix/, release/)",
      "category_id": "git",
      "details": [
        "Estrategia de nombrado y uso de ramas.",
        "GitFlow (complejo: main, develop, feature/, hotfix/, release/).",
        "GitHub Flow (simple: main es desplegable, feature/)."
      ]
    },
    {
      "id": "git-code-reviews",
      "title": "Code reviews efectivos",
      "category_id": "git",
      "details": [
        "Revisar PRs peque√±os. Ser constructivo y emp√°tico.",
        "Enfocarse en la l√≥gica, arquitectura y bugs, no solo en estilo (para eso est√°n los linters).",
        "Proveer sugerencias concretas."
      ]
    },
    {
      "id": "mindset-ownership",
      "title": "Ownership: responsabilidad sobre tu c√≥digo",
      "category_id": "soft-skills",
      "details": [
        "Tomar responsabilidad por tu c√≥digo desde el desarrollo hasta producci√≥n y mantenimiento.",
        "No culpar a otros; si algo falla, eres responsable de arreglarlo o encontrar a qui√©n pueda."
      ]
    },
    {
      "id": "mindset-debugging",
      "title": "Debugging profundo (logs, breakpoints, tracing)",
      "category_id": "soft-skills",
      "details": [
        "No solo \"probar hasta que funcione\".",
        "M√©todo cient√≠fico: Formular hip√≥tesis, probarlas.",
        "Usar herramientas: console.log, breakpoints (debugger), tracing (red/logs), 'rubber ducking'."
      ]
    },
    {
      "id": "mindset-growth",
      "title": "Growth mindset: aprender de bugs y errores",
      "category_id": "soft-skills",
      "details": [
        "Mentalidad de crecimiento (vs. mentalidad fija).",
        "Creer que la habilidad se puede desarrollar.",
        "Ver los bugs y errores no como fracasos, sino como oportunidades de aprendizaje."
      ]
    },
    {
      "id": "mindset-remote",
      "title": "Remote discipline: documentaci√≥n, comunicaci√≥n as√≠ncrona",
      "category_id": "soft-skills",
      "details": [
        "Requiere proactividad y autogesti√≥n.",
        "Comunicaci√≥n as√≠ncrona: Escribir mensajes claros, completos.",
        "Documentaci√≥n: Escribir lo que haces (PRs, wikis, READMEs) para que otros lo entiendan sin preguntar."
      ]
    },
    {
      "id": "mindset-ai",
      "title": "AI-curiosity: integrar herramientas como Copilot, ChatGPT, etc.",
      "category_id": "soft-skills",
      "details": [
        "No solo usar IA, sino entender *c√≥mo* usarla efectivamente.",
        "Usar para boilerplate, tests, refactoring, aprender conceptos.",
        "Ser cr√≠tico: Validar siempre el c√≥digo generado por la IA."
      ]
    },
    {
      "id": "mindset-mentoria",
      "title": "Mentor√≠a y knowledge sharing: documentar, ense√±ar, revisar",
      "category_id": "soft-skills",
      "details": [
        "La responsabilidad de un senior no es solo programar, sino elevar al equipo.",
        "Documentar decisiones de arquitectura.",
        "Ense√±ar activamente a juniors (pair programming)."
      ]
    },
    {
      "id": "extra-algoritmos-estructuras",
      "title": "Algoritmos y estructuras de datos (listas, √°rboles, hashmaps)",
      "category_id": "extras",
      "details": [
        "list/array: Acceso O(1) por √≠ndice, inserci√≥n/borrado O(n).",
        "hashmap/dict: Inserci√≥n, borrado y b√∫squeda en O(1) promedio.",
        "√°rboles (BST): B√∫squeda, inserci√≥n, borrado en O(log n) si est√°n balanceados."
      ]
    },
    {
      "id": "extra-complejidad-temporal",
      "title": "Complejidad temporal (O(n), O(log n))",
      "category_id": "extras",
      "details": [
        "Medida de c√≥mo escala el tiempo de ejecuci√≥n de un algoritmo con el tama√±o de la entrada (n).",
        "O(1): Constante.",
        "O(log n): Logar√≠tmico (ej. b√∫squeda binaria).",
        "O(n): Lineal (ej. recorrer un array).",
        "O(n log n): (ej. merge sort).",
        "O(n^2): Cuadr√°tico (ej. loops anidados)."
      ]
    },
    {
      "id": "extra-patrones-diseno",
      "title": "Patrones de dise√±o (Factory, Observer, Singleton)",
      "category_id": "extras",
      "details": [
        "Soluciones reutilizables a problemas comunes.",
        "Factory: (Creacional) Centraliza la creaci√≥n de objetos.",
        "Observer: (Comportamiento) Un objeto (subject) notifica a m√∫ltiples objetos (observers) sobre cambios.",
        "Singleton: (Creacional) Asegura que una clase tenga una sola instancia."
      ]
    },
    {
      "id": "extra-rest-vs-graphql",
      "title": "REST vs GraphQL",
      "category_id": "extras",
      "details": [
        "REST: Arquitectura basada en recursos y verbos HTTP (GET, POST, PUT, DELETE). Tiende a 'over-fetching' (datos de m√°s) o 'under-fetching' (m√∫ltiples llamadas).",
        "GraphQL: Lenguaje de consulta para APIs. El cliente especifica *exactamente* qu√© datos necesita en una sola petici√≥n."
      ]
    },
    {
      "id": "extra-seguridad",
      "title": "Seguridad b√°sica (XSS, CSRF, JWT)",
      "category_id": "extras",
      "details": [
        "XSS (Cross-Site Scripting): Inyectar script malicioso. Prevenci√≥n: Escapar la salida del usuario.",
        "CSRF (Cross-Site Request Forgery): Forzar a un usuario autenticado a ejecutar acciones. Prevenci√≥n: Tokens anti-CSRF.",
        "JWT (JSON Web Token): Est√°ndar para transmitir 'claims' (info de usuario, roles) de forma segura y firmada."
      ]
    },
    {
      "id": "extra-arquitectura-limpia",
      "title": "Arquitectura limpia (no spaghetti code)",
      "category_id": "extras",
      "details": [
        "Dise√±o de software (ej. Clean Architecture) que separa responsabilidades en capas.",
        "Objetivo: C√≥digo mantenible, testeable, independiente de frameworks y UI.",
        "Evitar 'spaghetti code' (c√≥digo enredado, alta dependencia)."
      ]
    },
    {
      "id": "extra-ci-cd",
      "title": "CI/CD y despliegue sin romper producci√≥n",
      "category_id": "extras",
      "details": [
        "CI (Continuous Integration): Integrar cambios frecuentemente, corriendo builds y tests autom√°ticos (ej. GitHub Actions).",
        "CD (Continuous Delivery/Deployment): Desplegar autom√°ticamente los cambios que pasan CI a un entorno (staging o producci√≥n)."
      ]
    }
  ]
}
